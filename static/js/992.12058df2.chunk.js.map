{"version":3,"file":"static/js/992.12058df2.chunk.js","mappings":"qMAIO,MAAMA,EAAwB,CACnCC,EAAAA,KAAKC,KAAIC,EAAAA,EAAAA,OAAqB,CAACC,EAAGC,EAAKC,IAC9BD,EAAIC,EAAIC,KAAKC,OAIlBA,EAA2B,CAC/B,CACEC,GAAI,KACJC,KAAM,eACNC,YAAa,qFACbC,MAAO,UACPC,SACE,8HAEJ,CACEJ,GAAI,KACJC,KAAM,qBACNC,YAAa,wEACbC,MAAO,UACPC,SACE,kK,uBCZN,MAAMC,EAAsBA,KAC1B,MAAMC,EAAQC,eAAeC,QAAQ,SACrC,OAAOF,EAAQG,KAAKC,MAAMJ,GAAS,EAAE,EAS1BK,EAAmB,CAC9BnB,EAAAA,KAAKoB,MAAgBC,EAAAA,EAAAA,OAAsBC,MAAOC,EAAKnB,EAAKC,KAC1D,MAAM,MAAEmB,EAAK,SAAEC,SAAmBF,EAAIjB,OAChCQ,EAAQD,IAGd,GAFAa,QAAQC,IAAIb,IAEPU,IAAUC,EACb,OAAOrB,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEuB,MAAO,mBAKhD,GAFqBf,EAAMgB,MAAMC,GAAeA,EAAKP,QAAUA,IAG7D,OAAOpB,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEuB,MAAO,0BAGhD,MACMG,EAAU,CAAER,QAAOC,WAAUQ,MADrB,kBAId,MA1BuBF,KACzB,MAAMjB,EAAQD,IACdC,EAAMoB,KAAKH,GACXhB,eAAeoB,QAAQ,QAASlB,KAAKmB,UAAUtB,GAAO,EAqBpDuB,CAAkBL,GAEX5B,EACLC,EAAIuB,OAAO,KACXvB,EAAIC,KAAK,CACPkB,MAAOQ,EAAQR,MACfS,MAAOD,EAAQC,QAElB,IAGHjC,EAAAA,KAAKoB,MAAgBkB,EAAAA,EAAAA,OAAiBhB,MAAOC,EAAKnB,EAAKC,KACrD,MAAM,MAAEmB,EAAK,SAAEC,SAAmBF,EAAIjB,OAChCQ,EAAQD,IAGd,GAFAa,QAAQC,IAAIb,IAEPU,IAAUC,EACb,OAAOrB,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEuB,MAAO,mBAGhD,MAAME,EAAOjB,EAAMgB,MAAMS,GAAYA,EAAEf,QAAUA,GAASe,EAAEd,WAAaA,IACzE,OAAKM,EAIE3B,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEkB,MAAOO,EAAKP,MAAOS,MAAOF,EAAKE,SAH7D7B,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEuB,MAAO,8BAG+B,K,kCC7D5E,MAAMW,EAAsB,CACjCxC,EAAAA,KAAKC,KACHwC,EAAAA,EAAAA,IAAgB,CACdC,WAAY,UAEd,CAACvC,EAAGC,EAAKC,IACAD,EAAIC,EAAIC,KAAKqC,MAGxB3C,EAAAA,KAAKC,KACHwC,EAAAA,EAAAA,IAAgB,CACdC,WAAY,UAEd,CAACvC,EAAGC,EAAKC,IACAD,EAAIC,EAAIC,KAAKqC,MAGxB3C,EAAAA,KAAKC,KAAI2C,EAAAA,EAAAA,IAAqB,eAAe,CAACrB,EAAKnB,EAAKC,KACtD,MAAM,UAAEwC,GAActB,EAAIuB,OACpBC,EAAUJ,EAAmBK,QAAQlB,MAAMmB,GAAMA,EAAEzC,KAAO0C,OAAOL,KACvE,OAAOzC,EAAIC,EAAIC,KAAKyC,GAAS,IAE/B/C,EAAAA,KAAKC,KAAIkD,EAAAA,EAAAA,IAAsB,eAAe,CAAChD,EAAGC,EAAKC,IAC9CD,EACLC,EAAIC,KAAK,CACP,CACEE,GAAI,EACJC,KAAM,WACN2C,SAAU,GACVP,UAAW,GAEb,CACErC,GAAI,EACJC,KAAM,WACN2C,SAAU,GACVP,UAAW,SAOfF,EAAqB,CACzBK,QAAS,CACP,CACExC,GAAI,QACJC,KAAM,yHACNG,SACE,mGACFyC,MAAO,OAET,CACE7C,GAAI,QACJC,KAAM,uDACNG,SACE,mGACFyC,MAAO,KAET,CACE7C,GAAI,QACJC,KAAM,4JACNG,SACE,mGACFyC,MAAO,OAET,CACE7C,GAAI,QACJC,KAAM,sFACNG,SACE,mGACFyC,MAAO,OAET,CACE7C,GAAI,QACJC,KAAM,oHACNG,SACE,mGACFyC,MAAO,QAGXC,OAAQ,EACRC,cAAe,EACfC,KAAM,GACNC,MAAM,G,kCCvFD,IAAIC,EAAW,CACpBV,QAAS,CACP,CACExC,GAAI,EACJuC,QAAS,CACPvC,GAAI,EACJC,KAAM,YACN4C,MAAO,IACPzC,SAAU,qCAGd,CACEJ,GAAI,EACJuC,QAAS,CACPvC,GAAI,EACJC,KAAM,YACN4C,MAAO,IACPzC,SAAU,sCAIhB+C,SAAU,CACRC,KAAM,CACJC,QAAQ,EACRC,UAAU,EACVC,OAAO,GAETC,WAAY,EACZC,SAAU,GACVC,OAAQ,EACRC,SAAS,EACTC,OAAO,GAETC,WAAY,EACZd,cAAe,GACfE,MAAM,EACNH,OAAQ,EACRE,KAAM,GACNc,iBAAkB,EAClBC,OAAO,EACPR,OAAO,GChCF,MAAMS,EAAsB,CACjCxE,EAAAA,KAAKoB,MAAeqD,EAAAA,EAAAA,OAAenD,MAAOC,EAAKnB,EAAKC,KAClD,MAAM,UAAEwC,SAAoBtB,EAAIjB,OAEhC,IAAKuC,EACH,OAAOzC,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEuB,MAAO,mBAGhD,MAAM6C,EAAQhB,EAASV,QAAQ2B,OAAS,EAElCC,EAA6B,CACjCpE,GAAIkE,EACJ7B,aAaF,OAVAa,EAASV,QAAQd,KAAK,CACpB1B,GAAIkE,EACJ3B,QAAS,CACPvC,GAAIqC,EACJpC,KAAK,WAADoE,OAAaC,OAAOC,aAAa,GAAKL,IAC1CrB,MAAO2B,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GACzCtE,SAAS,8BAADiE,OAAgCH,EAAK,WAI1CtE,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAKsE,GAAU,IAGjD5E,EAAAA,KAAKC,KAAIkF,EAAAA,EAAAA,OAAe,CAAChF,EAAGC,EAAKC,IACxBD,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAKoD,MAGvC1D,EAAAA,KAAKoF,QAAOC,EAAAA,EAAAA,IAAe,YAAY/D,MAAOC,EAAKnB,EAAKC,KACtD,MAAM,OAAEiF,GAAW/D,EAAIuB,OAEjByC,EAAY7B,EAASV,QAAQwC,WAAWC,GAASA,EAAKjF,KAAO0C,OAAOoC,KAE1E,OAAmB,IAAfC,EACKnF,EAAIC,EAAIuB,OAAO,KAAMvB,EAAIC,KAAK,CAAEuB,MAAO,qBAEhD6B,EAASV,QAAQ0C,OAAOH,EAAW,GAE5BnF,EAAIC,EAAIuB,OAAO,MAAK,KC7ClB+D,GAASC,EAAAA,EAAAA,gBACjB7F,KACAyC,KACArB,KACAqD,E","sources":["api/hooks/Mock/categories.mock.ts","api/hooks/Mock/login.mock.ts","api/hooks/Mock/products.mock.ts","api/hooks/Mock/mockData.ts","api/hooks/Mock/wishList.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport { getCategoriesPath } from '../useGetCategorys';\n\nexport const categoriesMockHandler = [\n  rest.get(getCategoriesPath(), (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n\nconst CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 2920,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2930,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n","import { rest } from 'msw';\n\nimport type { LoginData } from '@/types';\n\nimport { postLoginPath } from '../usePostLogin';\nimport { postMembershipPath } from '../usePostMembership';\n\ntype User = {\n  email: string;\n  password: string;\n  token: string;\n};\n\nconst getUsersFromSession = () => {\n  const users = sessionStorage.getItem('users');\n  return users ? JSON.parse(users) : [];\n};\n\nconst saveUserToSession = (user: { email: string; password: string; token: string }) => {\n  const users = getUsersFromSession();\n  users.push(user);\n  sessionStorage.setItem('users', JSON.stringify(users));\n};\n\nexport const loginMockHandler = [\n  rest.post<LoginData>(postMembershipPath(), async (req, res, ctx) => {\n    const { email, password } = await req.json();\n    const users = getUsersFromSession();\n    console.log(users);\n\n    if (!email || !password) {\n      return res(ctx.status(400), ctx.json({ error: 'Invalid input' }));\n    }\n\n    const existingUser = users.find((user: User) => user.email === email);\n\n    if (existingUser) {\n      return res(ctx.status(400), ctx.json({ error: 'Email already exists' }));\n    }\n\n    const token = 'fake-jwt-token'; // 토큰 생성\n    const newUser = { email, password, token };\n    saveUserToSession(newUser);\n\n    return res(\n      ctx.status(201),\n      ctx.json({\n        email: newUser.email,\n        token: newUser.token,\n      }),\n    );\n  }),\n\n  rest.post<LoginData>(postLoginPath(), async (req, res, ctx) => {\n    const { email, password } = await req.json();\n    const users = getUsersFromSession();\n    console.log(users);\n\n    if (!email || !password) {\n      return res(ctx.status(400), ctx.json({ error: 'Invalid input' }));\n    }\n\n    const user = users.find((u: User) => u.email === email && u.password === password);\n    if (!user) {\n      return res(ctx.status(403), ctx.json({ error: 'Invalid email or password' }));\n    }\n\n    return res(ctx.status(200), ctx.json({ email: user.email, token: user.token }));\n  }),\n];\n","import { rest } from 'msw';\n\nimport { getProductDetailPath } from '../useGetProductDetail';\nimport { getProductOptionsPath } from '../useGetProductOptions';\nimport { getProductsPath } from '../useGetProducts';\n\nexport const productsMockHandler = [\n  rest.get(\n    getProductsPath({\n      categoryId: '2920',\n    }),\n    (_, res, ctx) => {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    },\n  ),\n  rest.get(\n    getProductsPath({\n      categoryId: '2930',\n    }),\n    (_, res, ctx) => {\n      return res(ctx.json(PRODUCTS_MOCK_DATA));\n    },\n  ),\n  rest.get(getProductDetailPath(':productId'), (req, res, ctx) => {\n    const { productId } = req.params;\n    const product = PRODUCTS_MOCK_DATA.content.find((p) => p.id === Number(productId));\n    return res(ctx.json(product));\n  }),\n  rest.get(getProductOptionsPath(':productId'), (_, res, ctx) => {\n    return res(\n      ctx.json([\n        {\n          id: 1,\n          name: 'Option A',\n          quantity: 10,\n          productId: 1,\n        },\n        {\n          id: 2,\n          name: 'Option B',\n          quantity: 20,\n          productId: 1,\n        },\n      ]),\n    );\n  }),\n];\n\nconst PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n","/* eslint-disable prefer-const */\n\nexport let mockData = {\n  content: [\n    {\n      id: 1,\n      product: {\n        id: 1,\n        name: 'Product A',\n        price: 100,\n        imageUrl: 'http://example.com/product-a.jpg',\n      },\n    },\n    {\n      id: 2,\n      product: {\n        id: 2,\n        name: 'Product B',\n        price: 150,\n        imageUrl: 'http://example.com/product-b.jpg',\n      },\n    },\n  ],\n  pageable: {\n    sort: {\n      sorted: true,\n      unsorted: false,\n      empty: false,\n    },\n    pageNumber: 0,\n    pageSize: 10,\n    offset: 0,\n    unpaged: false,\n    paged: true,\n  },\n  totalPages: 5,\n  totalElements: 50,\n  last: false,\n  number: 0,\n  size: 10,\n  numberOfElements: 2,\n  first: true,\n  empty: false,\n};\n","import { rest } from 'msw';\n\nimport type { WishData } from '@/types';\nimport type { WishResponseData } from '@/types';\n\nimport { deleteWishPath } from '../WishList/useDeleteWishList';\nimport { getWishPath } from '../WishList/useGetWishList';\nimport { putWishPath } from '../WishList/usePutWishList';\nimport { mockData } from './mockData';\n\nexport const wishListMockHandler = [\n  rest.post<WishData>(putWishPath(), async (req, res, ctx) => {\n    const { productId } = await req.json();\n\n    if (!productId) {\n      return res(ctx.status(400), ctx.json({ error: 'Invalid input' }));\n    }\n\n    const newId = mockData.content.length + 1;\n\n    const response: WishResponseData = {\n      id: newId,\n      productId,\n    };\n\n    mockData.content.push({\n      id: newId,\n      product: {\n        id: productId,\n        name: `Product ${String.fromCharCode(64 + newId)}`,\n        price: Math.floor(Math.random() * 100) + 50,\n        imageUrl: `http://example.com/product-${newId}.jpg`,\n      },\n    });\n\n    return res(ctx.status(201), ctx.json(response));\n  }),\n\n  rest.get(getWishPath(), (_, res, ctx) => {\n    return res(ctx.status(200), ctx.json(mockData));\n  }),\n\n  rest.delete(deleteWishPath(':wishId'), async (req, res, ctx) => {\n    const { wishId } = req.params;\n\n    const wishIndex = mockData.content.findIndex((wish) => wish.id === Number(wishId));\n\n    if (wishIndex === -1) {\n      return res(ctx.status(404), ctx.json({ error: 'Wish not found' }));\n    }\n    mockData.content.splice(wishIndex, 1);\n\n    return res(ctx.status(204));\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/hooks/Mock/categories.mock';\nimport { loginMockHandler } from '@/api/hooks/Mock/login.mock';\nimport { productsMockHandler } from '@/api/hooks/Mock/products.mock';\nimport { wishListMockHandler } from '@/api/hooks/Mock/wishList.mock';\n\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...loginMockHandler,\n  ...wishListMockHandler,\n);\n"],"names":["categoriesMockHandler","rest","get","getCategoriesPath","_","res","ctx","json","CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","getUsersFromSession","users","sessionStorage","getItem","JSON","parse","loginMockHandler","post","postMembershipPath","async","req","email","password","console","log","status","error","find","user","newUser","token","push","setItem","stringify","saveUserToSession","postLoginPath","u","productsMockHandler","getProductsPath","categoryId","PRODUCTS_MOCK_DATA","getProductDetailPath","productId","params","product","content","p","Number","getProductOptionsPath","quantity","price","number","totalElements","size","last","mockData","pageable","sort","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","totalPages","numberOfElements","first","wishListMockHandler","putWishPath","newId","length","response","concat","String","fromCharCode","Math","floor","random","getWishPath","delete","deleteWishPath","wishId","wishIndex","findIndex","wish","splice","worker","setupWorker"],"sourceRoot":""}